operators to extract subsets of R objects

[ returns an object of the same class as original
[[ extract elemets of list or data frame, single element only
$ (similar to [)

x <- c('a','b','c')

so x is a vector
then x[1] is also a vector
likewise x[1:2]
or x[x > 'a'] 

a <- c('a','b','c','a','b')
u <- x > "a"
# u = FALSE TRUE TRUE FALSE TRUE

x[u] will be [b c b]

--

x <- matrix(1:6, 2, 3)
will be
1 2 3
4 5 6

x[1,] is first row
x[,2] is 2nd column

note: retrieving element from a matrix returns a vector, not a matrix, unless we set drop to false
likewise, retrieving a column or row from a matrix returns a vector by default

if x is a matrix
x[1, , drop = FALSE]

this will return first row of matrix as a MATRIX

-- 

subsetting lists:

x <- list(foo = 1:4, bar = 0.6)
x[1]
will return a list, so the sequence 1-4 will still be named foo

but
x[[1]] will just return the sequence

x$bar will return the element
as will:
x[['bar]] -- just the element
but
x['bar'] will return a list, since we were subsetting a list

--

extracting multiple elements from a list... pass in a vector with desired indices

x <- list(foo = 1:4, bar = 0.6, baz = 'hello')
x[c(1,3)]
will return a list with 1st and 3rd elements

[[ can be used with computed indices, but $ can only use literal

--
subsetting nested elements of a list
x <- list(a = list(10,12,14), b = c(3.14, 2.81))

x[[c(1,3)]]
gets 3rd element from 1st element (in this case, 14)

x[[1]][[3]]
this does the same as above (14)

x[[c(2,1)]] is 3.14

Partial matching works with [[ and $

x <- list(aardvark = 1:5)
x$a
1 2 3 4 5

double bracket requires exact = FALSE flag

x[['a']]
NULL

but
x[['a', exact = FALSE]]
1 2 3 4 5

--
removing missing values, a common task

x < c(1,2,NA,4,NA,5)
bad <- is.na(x)
# bad will be logical vector, with TRUE for missing values
x[!bad], will return 1 2 4 5


also, use complete.cases
accepts vectors, returns logical vector indicating which all vectors have no missing values

x <- c(1,2,NA,4,NA,5)
y <- c('a',NA,'b','c',NA,'d')
good <- complete.cases(x,y)
[1]  TRUE FALSE FALSE  TRUE FALSE  TRUE

if you have a dataframe (e.g. airquality)

good <- complete.cases(airquality)
good vector will be true for each complete row of dataframe